# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file contains a Github Action that syncs with
# the Bidding and Auction Servers repo, including tags,
# on a regular schedule. It will push any new tags
# to your repo, and you can use Cloud Build,
# CodeBuild, or any webhook-based system to trigger
# an automatic build based on the new tag.
name: Sync with github.com/privacysandbox/bidding-auction-servers

on:
  schedule:
    - cron: '0 0 * * *' # every day at 00:00
  workflow_dispatch: # on button click

jobs:
  sync_code:
    runs-on: ubuntu-latest
    steps:
      - uses: tgymnich/fork-sync@v1.8
        continue-on-error: true
        with:
          base: main
          head: main
      - name: Checkout Code
        uses: actions/checkout@v3
        if: always()       # Always checkout, even if sync fails
      - name: Sync Tags with Upstream
        if: always()       # Always sync tags, even if sync or checkout fails
        run: |
          git fetch https://github.com/privacysandbox/bidding-auction-servers --tags --force

          echo "Finding the latest tag (using version sort)..."
          # Sort tags using version sorting (e.g., v1.10.0 > v1.9.0).
          # Use --sort=-creatordate for chronological sorting if preferred.
          LATEST_TAG=$(git tag --sort=-v:refname | head -n 1)

          # Check if any tag was found
          if [ -z "$LATEST_TAG" ]; then
            echo "No tags found in upstream. Skipping 'latest' tag creation."
          else
            echo "Latest tag identified: $LATEST_TAG"

            # Delete the 'latest' tag locally and remotely if it exists
            echo "Deleting old 'latest' tag locally (if exists)..."
            git tag -d latest || true
            echo "Deleting old 'latest' tag remotely (if exists)..."
            # Use the default origin (your fork)
            git push origin :refs/tags/latest || true

            # Create the new 'latest' tag pointing to the same commit as LATEST_TAG
            echo "Creating new 'latest' tag pointing to $LATEST_TAG..."
            git tag latest $LATEST_TAG
          fi

          echo "Pushing all local tags (including fetched and new 'latest') to origin..."
          # Push all local tags (fetched from upstream + new 'latest') to your fork (origin)
          # --force is needed to overwrite potentially existing tags on the origin
          git push origin --tags --force

          echo "Tags synced and 'latest' tag updated to point to $LATEST_TAG."
